generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL") // uses connection pooling
    // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String @unique
    password String

    role     UserRole  @default(USER)
    //прошли верификацию
    verified DateTime?

    //one to one
    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?
    //related with Google,Github or something else 
    provider         String?
    providerId       String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id   Int    @id @default(autoincrement())
    name String @unique

    //one to many
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name     String
    imageUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    //many to many
    ingredients Ingredient[]

    //one to many
    items ProductItem[]

    //many to one
    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId Int?
}

model ProductItem {
    id Int @id @default(autoincrement())

    price     Int
    size      Int?
    pizzaType Int?

    //one to one
    product   Product @relation(fields: [productId], references: [id])
    productId Int

    //one to many
    cartItems CartItem[]
}

model Ingredient {
    id Int @id @default(autoincrement())

    name     String
    price    Int
    imageUrl String

    //many to many
    products  Product[]
    //many to many
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id     Int   @id @default(autoincrement())
    //one to one
    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique

    //one to many
    items CartItem[]

    //need for unlogin and login users
    token String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//products in cart
model CartItem {
    id Int @id @default(autoincrement())

    //many to one
    cart   Cart @relation(fields: [cartId], references: [id])
    cartId Int

    //many to one
    productItem   ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    quantity Int @default(1)

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user   User?  @relation(fields: [userId], references: [id])
    userId Int?
    //need for unlogin and login users
    token  String

    totalAmount Int
    status      OrderStatus
    paymentId   String? //title of payFirm

    items Json //list of products

    fullName String
    email    String
    phone    String
    address  String
    comment  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id     Int  @id @default(autoincrement())
    //one to one-code for registration
    user   User @relation(fields: [userId], references: [id])
    userId Int  @unique

    code      String
    //time out for register
    createdAt DateTime @default(now())

    //twice unique:userId and code
    @@unique([userId, code])
}

model Story {
    id              Int    @id @default(autoincrement())
    previewImageUrl String

    items StoryItem[]

    createdAt DateTime @default(now())
}

model StoryItem {
    id Int @id @default(autoincrement())

    storyId Int
    story   Story @relation(fields: [storyId], references: [id])

    sourceUrl String

    createdAt DateTime @default(now())
}

enum OrderStatus {
    PENDING //created
    SUCCEEDED //was paid
    CANCELLED //mas not paid
}

enum UserRole {
    USER
    ADMIN
}
